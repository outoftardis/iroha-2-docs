import{_ as e,c as o,o as t,d as a}from"./app.ced819ec.js";const f='{"title":"Client Configuration","description":"","frontmatter":{},"headers":[],"relativePath":"guide/appendix/client-configuration.md","lastUpdated":1649230251000}',i={},n=a('<h1 id="client-configuration" tabindex="-1">Client Configuration <a class="header-anchor" href="#client-configuration" aria-hidden="true">#</a></h1><p>This tutorial will not go in detail about the options you can adjust with the client configuration settings, instead we will provide a broad overview of what is available in Iroha2. First, the <code>TORII_API_URL</code> is the same as <code>TORII</code> <code>API_ADDR</code> in the peer configuration. You should also add either <code>http://</code> or (<em>preferably</em>) <code>https://</code> to the address. If you are setting up an Iroha peer, you should probably set up a domain for public blockchains, while bare sockets are enough for a local private deployment. The <code>ACCOUNT_ID</code> should be self-explanatory: the only thing you need to worry about, is that the account must exist in the blockchain. In the example <code>genesis.json</code>, you can see how we&#39;ve set *alice@*wonderland up.</p>',2),r=[n];function c(s,d,l,h,u,p){return t(),o("div",null,r)}var g=e(i,[["render",c]]);export{f as __pageData,g as default};
