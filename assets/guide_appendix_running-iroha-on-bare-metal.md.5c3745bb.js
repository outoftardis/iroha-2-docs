import{_ as s,c as e,o as a,d as o}from"./app.ced819ec.js";var n="/iroha-2-docs/assets/appendix_running-iroha_cli-output.159236c6.png";const b='{"title":"Running Iroha on bare metal","description":"","frontmatter":{},"headers":[{"level":2,"title":"Pre-requisites","slug":"pre-requisites"},{"level":2,"title":"Environment variables: set-up","slug":"environment-variables-set-up"},{"level":2,"title":"Files: set-up","slug":"files-set-up"},{"level":2,"title":"First run of Iroha on bare metal","slug":"first-run-of-iroha-on-bare-metal"},{"level":2,"title":"Environment Variables: deploy a minimal BFT network","slug":"environment-variables-deploy-a-minimal-bft-network"},{"level":2,"title":"Files: deploy a minimal BFT network","slug":"files-deploy-a-minimal-bft-network"},{"level":2,"title":"Real-world deployment","slug":"real-world-deployment"}],"relativePath":"guide/appendix/running-iroha-on-bare-metal.md","lastUpdated":1649230251000}',t={},l=o(`<h1 id="running-iroha-on-bare-metal" tabindex="-1">Running Iroha on bare metal <a class="header-anchor" href="#running-iroha-on-bare-metal" aria-hidden="true">#</a></h1><h2 id="pre-requisites" tabindex="-1">Pre-requisites <a class="header-anchor" href="#pre-requisites" aria-hidden="true">#</a></h2><p>Having read most of the appendix, you are now prepared to start Iroha in a more advanced mode. What we are going to do is replicate the set up that we have in the <code>docker compose</code>, except we don\u2019t go through the intermediary of containers, and run Iroha directly. Running iroha on bare metal involves manipulating files and/or environment variables. What follows is an attempt to run Iroha on bare metal, using either of two methods. We shall first focus on the file-based approach, as it is the easiest to get right. We shall then show you how to do the same using environment variables, which can offer a better user experience if done right, but is more error-prone, particularly for exotic systems. First of all, we should note that we have only built the Iroha client so far. To build the peer software you should run</p><div class="language-kotlin"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">cargo build </span><span style="color:#CF222E;">-</span><span style="color:#24292F;">p iroha</span></span>
<span class="line"></span></code></pre></div><p>This will build Iroha in <code>debug</code> mode, containing many more debug-oriented features and very few (if any) compiler optimisations. A debug build is faster to compile, but if you intend to actually deploy Iroha, you should build it in <code>--release</code> mode like so</p><div class="language-kotlin"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">cargo build </span><span style="color:#CF222E;">-</span><span style="color:#24292F;">p iroha </span><span style="color:#CF222E;">--</span><span style="color:#24292F;">release</span></span>
<span class="line"></span></code></pre></div><p>This will take significantly longer, but should produce both a smaller and faster binary, suitable for deployment in the actual blockchains.</p><h2 id="environment-variables-set-up" tabindex="-1">Environment variables: set-up <a class="header-anchor" href="#environment-variables-set-up" aria-hidden="true">#</a></h2><p>Next we want to make sure that we have the right configuration. To do that, it\u2019s a good idea to either copy the contents of the <code>~/Git/iroha/configs/peer/</code> into a new directory, or alternatively to just run all commands from that directory: <code>cd ~/Git/iroha/configs/peer</code>. A third option is to specify the full path to the configuration in an environment variable. For simplicity we shall do the latter:</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#0550AE;">cd</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">~</span></span>
<span class="line"><span style="color:#CF222E;">export</span><span style="color:#24292F;"> IROHA2_GENESIS_PATH=</span><span style="color:#0A3069;">&quot;$(pwd)/Git/iroha/configs/peer/genesis.json&quot;</span></span>
<span class="line"><span style="color:#CF222E;">export</span><span style="color:#24292F;"> IROHA2_CONFIG_PATH=</span><span style="color:#0A3069;">&quot;$(pwd)/Git/iroha/configs/peer/config.json&quot;</span></span>
<span class="line"></span></code></pre></div><p>For extra convenience, you could add the Iroha 2 <code>target</code> directory to your <code>PATH</code>. This means that instead of having to specify the full path to the executable <code>iroha</code> you can instead type <code>iroha</code> directly into your command line.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Don\u2019t forget to replace <code>debug</code> with <code>release</code> when you\u2019re ready to deploy in the real world.</p></div><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">export</span><span style="color:#24292F;"> PATH=</span><span style="color:#0A3069;">&quot;</span><span style="color:#24292F;">$PATH</span><span style="color:#0A3069;">:$(pwd)/Git/iroha/target/debug&quot;</span></span>
<span class="line"></span></code></pre></div><p>This way you can run <code>iroha</code> from any directory, without having to worry about configuration paths and/or specifying the full path to the Iroha executable.</p><p>The instructions here should probably be made permanent, which you can do by adding the following environment variables to your startup shell. On older Linux systems, you copy and paste everything except <code>cd ~</code> to <code>~/.bashrc</code>. On macs running Mac OS X 10.6 and later, as well as some Linux systems, you want to add the same lines to <code>~/.zshrc</code>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This process is almost universally unreliable and messy, and it\u2019s likely that your system is special in that it breaks some of our assumptions. If the above optional steps didn\u2019t work for you, you can keep working in the <code>~/Git/iroha/configs/peer/</code> folder, and run iroha by doing <code>~/Git/iroha/target/debug/iroha</code>. This makes the command-line a little harder to read, which is why we recommend settin up your environment first.</p></div><div class="info custom-block"><p class="custom-block-title">Note</p><p>The tutorial assumes that you\u2019re running either Linux, Mac OS X, or Windows using WSL. It should be possible to run directly on Windows, but that is neither recommended nor easy. If you don\u2019t want to use a Unix-like system, we suggest that you wait until we publish a detailed guide for Windows users.</p></div><h2 id="files-set-up" tabindex="-1">Files: set-up <a class="header-anchor" href="#files-set-up" aria-hidden="true">#</a></h2><p>This is the recommended method of bringing up an Iroha peer. What we do is create a new directory for the configuration files,</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">mkdir -p </span><span style="color:#CF222E;">~</span><span style="color:#24292F;">/Git/iroha/deploy</span></span>
<span class="line"></span></code></pre></div><p>and copy the <code>peer</code> configuration into it.</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">cp -vfr </span><span style="color:#CF222E;">~</span><span style="color:#24292F;">/Git/iroha/configs/peer/</span><span style="color:#CF222E;">*</span><span style="color:#24292F;">.json </span><span style="color:#CF222E;">~</span><span style="color:#24292F;">/Git/iroha/deploy</span></span>
<span class="line"></span></code></pre></div><p>also we copy the respective iroha binary into your binary folder</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">sudo cp -vfr </span><span style="color:#CF222E;">~</span><span style="color:#24292F;">/Git/iroha/target/debug/iroha /usr/bin/</span></span>
<span class="line"></span></code></pre></div><p>which will install Iroha 2 system wide.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You could also use the iroha peer binary locally, by copying it into the same folder. The only difference would be that you\u2019d be calling Iroha like so: <code>./iroha</code> instead of <code>iroha</code>.</p></div><h2 id="first-run-of-iroha-on-bare-metal" tabindex="-1">First run of Iroha on bare metal <a class="header-anchor" href="#first-run-of-iroha-on-bare-metal" aria-hidden="true">#</a></h2><p>If you\u2019ve done everything correctly, you can now do</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">iroha</span></span>
<span class="line"></span></code></pre></div><p>to start your first peer and be greeted with</p><p><img src="`+n+`" alt=""></p><p>This means that everything is working, but also that we need to do some more work. You have just started a single peer, which can tolerate exactly 0 faults. Running two peers is also possible, but again, can tolerate 0 faults. You must run at least 4 peers in order to have the capacity to tolerate at least one fault. In general, if you want to be resistant to <code>f</code> faults, you want to have <code>3f+1</code> peers: (4, 7, 10 etc.). You can\u2019t really start them in any way you want, though. When we started our original peer, in its configuration, we specified that it has to trust very specific peers, which have the given private key and listen on a specific address. In order to know how to run them appropriately, take a look at <code>docker-compose.yml</code>.</p><details class="details custom-block"><summary>docker-compose.yaml</summary><div class="language-yaml"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#116329;">version</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">&#39;3.3&#39;</span></span>
<span class="line"><span style="color:#116329;">services</span><span style="color:#24292F;">:</span></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#116329;">iroha0</span><span style="color:#24292F;">:</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#116329;">image</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">hyperledger/iroha2:dev</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#116329;">environment</span><span style="color:#24292F;">:</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#116329;">TORII_P2P_ADDR</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">iroha0:1337</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#116329;">TORII_API_URL</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">iroha0:8080</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#116329;">TORII_STATUS_URL</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">iroha0:8180</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#116329;">IROHA_PUBLIC_KEY</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">&#39;ed01207233bfc89dcbd68c19fde6ce6158225298ec1131b6a130d1aeb454c1ab5183c0&#39;</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#116329;">IROHA_PRIVATE_KEY</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">&#39;{&quot;digest_function&quot;: &quot;ed25519&quot;, &quot;payload&quot;: &quot;9ac47abf59b356e0bd7dcbbbb4dec080e302156a48ca907e47cb6aea1d32719e7233bfc89dcbd68c19fde6ce6158225298ec1131b6a130d1aeb454c1ab5183c0&quot;}&#39;</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#116329;">SUMERAGI_TRUSTED_PEERS</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">&#39;[{&quot;address&quot;:&quot;iroha0:1337&quot;, &quot;public_key&quot;: &quot;ed01207233bfc89dcbd68c19fde6ce6158225298ec1131b6a130d1aeb454c1ab5183c0&quot;}, {&quot;address&quot;:&quot;iroha1:1338&quot;, &quot;public_key&quot;: &quot;ed0120cc25624d62896d3a0bfd8940f928dc2abf27cc57cefeb442aa96d9081aae58a1&quot;}, {&quot;address&quot;: &quot;iroha2:1339&quot;, &quot;public_key&quot;: &quot;ed0120faca9e8aa83225cb4d16d67f27dd4f93fc30ffa11adc1f5c88fd5495ecc91020&quot;}, {&quot;address&quot;: &quot;iroha3:1340&quot;, &quot;public_key&quot;: &quot;ed01208e351a70b6a603ed285d666b8d689b680865913ba03ce29fb7d13a166c4e7f1f&quot;}]&#39;</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#116329;">ports</span><span style="color:#24292F;">:</span></span>
<span class="line"><span style="color:#24292F;">      - </span><span style="color:#0A3069;">&#39;1337:1337&#39;</span></span>
<span class="line"><span style="color:#24292F;">      - </span><span style="color:#0A3069;">&#39;8080:8080&#39;</span></span>
<span class="line"><span style="color:#24292F;">      - </span><span style="color:#0A3069;">&#39;8180:8180&#39;</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#116329;">command</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">./iroha --submit-genesis</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#116329;">iroha1</span><span style="color:#24292F;">:</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#116329;">image</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">hyperledger/iroha2:dev</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#116329;">environment</span><span style="color:#24292F;">:</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#116329;">TORII_P2P_ADDR</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">iroha1:1338</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#116329;">TORII_API_URL</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">iroha1:8081</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#116329;">TORII_STATUS_URL</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">iroha1:8181</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#116329;">IROHA_PUBLIC_KEY</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">&#39;ed0120cc25624d62896d3a0bfd8940f928dc2abf27cc57cefeb442aa96d9081aae58a1&#39;</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#116329;">IROHA_PRIVATE_KEY</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">&#39;{&quot;digest_function&quot;: &quot;ed25519&quot;, &quot;payload&quot;: &quot;3bac34cda9e3763fa069c1198312d1ec73b53023b8180c822ac355435edc4a24cc25624d62896d3a0bfd8940f928dc2abf27cc57cefeb442aa96d9081aae58a1&quot;}&#39;</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#116329;">SUMERAGI_TRUSTED_PEERS</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">&#39;[{&quot;address&quot;:&quot;iroha0:1337&quot;, &quot;public_key&quot;: &quot;ed01207233bfc89dcbd68c19fde6ce6158225298ec1131b6a130d1aeb454c1ab5183c0&quot;}, {&quot;address&quot;:&quot;iroha1:1338&quot;, &quot;public_key&quot;: &quot;ed0120cc25624d62896d3a0bfd8940f928dc2abf27cc57cefeb442aa96d9081aae58a1&quot;}, {&quot;address&quot;: &quot;iroha2:1339&quot;, &quot;public_key&quot;: &quot;ed0120faca9e8aa83225cb4d16d67f27dd4f93fc30ffa11adc1f5c88fd5495ecc91020&quot;}, {&quot;address&quot;: &quot;iroha3:1340&quot;, &quot;public_key&quot;: &quot;ed01208e351a70b6a603ed285d666b8d689b680865913ba03ce29fb7d13a166c4e7f1f&quot;}]&#39;</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#116329;">ports</span><span style="color:#24292F;">:</span></span>
<span class="line"><span style="color:#24292F;">      - </span><span style="color:#0A3069;">&#39;1338:1338&#39;</span></span>
<span class="line"><span style="color:#24292F;">      - </span><span style="color:#0A3069;">&#39;8081:8081&#39;</span></span>
<span class="line"><span style="color:#24292F;">      - </span><span style="color:#0A3069;">&#39;8181:8181&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#116329;">iroha2</span><span style="color:#24292F;">:</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#116329;">image</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">hyperledger/iroha2:dev</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#116329;">environment</span><span style="color:#24292F;">:</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#116329;">TORII_P2P_ADDR</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">iroha2:1339</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#116329;">TORII_API_URL</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">iroha2:8082</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#116329;">TORII_STATUS_URL</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">iroha2:8182</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#116329;">IROHA_PUBLIC_KEY</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">&#39;ed0120faca9e8aa83225cb4d16d67f27dd4f93fc30ffa11adc1f5c88fd5495ecc91020&#39;</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#116329;">IROHA_PRIVATE_KEY</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">&#39;{&quot;digest_function&quot;: &quot;ed25519&quot;, &quot;payload&quot;: &quot;1261a436d36779223d7d6cf20e8b644510e488e6a50bafd77a7485264d27197dfaca9e8aa83225cb4d16d67f27dd4f93fc30ffa11adc1f5c88fd5495ecc91020&quot;}&#39;</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#116329;">SUMERAGI_TRUSTED_PEERS</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">&#39;[{&quot;address&quot;:&quot;iroha0:1337&quot;, &quot;public_key&quot;: &quot;ed01207233bfc89dcbd68c19fde6ce6158225298ec1131b6a130d1aeb454c1ab5183c0&quot;}, {&quot;address&quot;:&quot;iroha1:1338&quot;, &quot;public_key&quot;: &quot;ed0120cc25624d62896d3a0bfd8940f928dc2abf27cc57cefeb442aa96d9081aae58a1&quot;}, {&quot;address&quot;: &quot;iroha2:1339&quot;, &quot;public_key&quot;: &quot;ed0120faca9e8aa83225cb4d16d67f27dd4f93fc30ffa11adc1f5c88fd5495ecc91020&quot;}, {&quot;address&quot;: &quot;iroha3:1340&quot;, &quot;public_key&quot;: &quot;ed01208e351a70b6a603ed285d666b8d689b680865913ba03ce29fb7d13a166c4e7f1f&quot;}]&#39;</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#116329;">ports</span><span style="color:#24292F;">:</span></span>
<span class="line"><span style="color:#24292F;">      - </span><span style="color:#0A3069;">&#39;1339:1339&#39;</span></span>
<span class="line"><span style="color:#24292F;">      - </span><span style="color:#0A3069;">&#39;8082:8082&#39;</span></span>
<span class="line"><span style="color:#24292F;">      - </span><span style="color:#0A3069;">&#39;8182:8182&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#116329;">iroha3</span><span style="color:#24292F;">:</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#116329;">image</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">hyperledger/iroha2:dev</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#116329;">environment</span><span style="color:#24292F;">:</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#116329;">TORII_P2P_ADDR</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">iroha3:1340</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#116329;">TORII_API_URL</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">iroha3:8083</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#116329;">TORII_STATUS_URL</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">iroha3:8183</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#116329;">IROHA_PUBLIC_KEY</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">&#39;ed01208e351a70b6a603ed285d666b8d689b680865913ba03ce29fb7d13a166c4e7f1f&#39;</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#116329;">IROHA_PRIVATE_KEY</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">&#39;{&quot;digest_function&quot;: &quot;ed25519&quot;, &quot;payload&quot;: &quot;a70dab95c7482eb9f159111b65947e482108cfe67df877bd8d3b9441a781c7c98e351a70b6a603ed285d666b8d689b680865913ba03ce29fb7d13a166c4e7f1f&quot;}&#39;</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#116329;">SUMERAGI_TRUSTED_PEERS</span><span style="color:#24292F;">: </span><span style="color:#0A3069;">&#39;[{&quot;address&quot;:&quot;iroha0:1337&quot;, &quot;public_key&quot;: &quot;ed01207233bfc89dcbd68c19fde6ce6158225298ec1131b6a130d1aeb454c1ab5183c0&quot;}, {&quot;address&quot;:&quot;iroha1:1338&quot;, &quot;public_key&quot;: &quot;ed0120cc25624d62896d3a0bfd8940f928dc2abf27cc57cefeb442aa96d9081aae58a1&quot;}, {&quot;address&quot;: &quot;iroha2:1339&quot;, &quot;public_key&quot;: &quot;ed0120faca9e8aa83225cb4d16d67f27dd4f93fc30ffa11adc1f5c88fd5495ecc91020&quot;}, {&quot;address&quot;: &quot;iroha3:1340&quot;, &quot;public_key&quot;: &quot;ed01208e351a70b6a603ed285d666b8d689b680865913ba03ce29fb7d13a166c4e7f1f&quot;}]&#39;</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#116329;">ports</span><span style="color:#24292F;">:</span></span>
<span class="line"><span style="color:#24292F;">      - </span><span style="color:#0A3069;">&#39;1340:1340&#39;</span></span>
<span class="line"><span style="color:#24292F;">      - </span><span style="color:#0A3069;">&#39;8083:8083&#39;</span></span>
<span class="line"><span style="color:#24292F;">      - </span><span style="color:#0A3069;">&#39;8183:8183&#39;</span></span>
<span class="line"></span></code></pre></div></details><p>For every peer, the <code>environment</code> section is the set of things that you should put in front of the <code>iroha</code> command, replacing colons with equals signs. All the socket addresses are also given internal to the docker network, so we should replace them with <code>[localhost](http://localhost)</code> which is <code>127.0.0.1</code> on most machines.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Each Iroha instance is going to listen on three ports: the Peer-to-peer communications channel (<code>133X</code>), the API url, where most client requests are posted (<code>808X</code>), and finally, a telemetry endpoint <code>818X</code>. All three ports need to be adjusted so there are no collisions. See the <code>docker-compose.yml</code> for an example, and adjust as needed.</p></div><h2 id="environment-variables-deploy-a-minimal-bft-network" tabindex="-1">Environment Variables: deploy a minimal BFT network <a class="header-anchor" href="#environment-variables-deploy-a-minimal-bft-network" aria-hidden="true">#</a></h2><p>So to run the First peer, we need to write</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">TORII_P2P_ADDR=</span><span style="color:#0A3069;">&quot;127.0.0.1:1337&quot;</span></span>
<span class="line"><span style="color:#24292F;">TORII_API_URL=</span><span style="color:#0A3069;">&quot;127.0.0.1:8080&quot;</span></span>
<span class="line"><span style="color:#24292F;">TORII_STATUS_URL=</span><span style="color:#0A3069;">&quot;127.0.0.1:8180&quot;</span></span>
<span class="line"><span style="color:#24292F;">IROHA_PUBLIC_KEY=</span><span style="color:#0A3069;">&quot;ed01207233bfc89dcbd68c19fde6ce6158225298ec1131b6a130d1aeb454c1ab5183c0&quot;</span><span style="color:#24292F;"> IROHA_PRIVATE_KEY=</span><span style="color:#0A3069;">&#39;{&quot;digest_function&quot;: &quot;ed25519&quot;, &quot;payload&quot;: &quot;9ac47abf59b356e0bd7dcbbbb4dec080e302156a48ca907e47cb6aea1d32719e7233bfc89dcbd68c19fde6ce6158225298ec1131b6a130d1aeb454c1ab5183c0&quot;}&#39;</span></span>
<span class="line"><span style="color:#24292F;">iroha --submit</span></span>
<span class="line"></span></code></pre></div><p>and three other similar lines of bash for the remaining deployments.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>To copy and paste into the terminal on Linux systems, you should remember that <code>Control + **shift** + V</code> is the appropriate <code>paste</code> shortcut.</p></div><p>Also note that we asked this peer to <code>--submit</code> or <code>--submit-genesis</code>. This means that in the initial network topology, this peer is the leader. At least one peer (usually the first) needs to be the leader in the initial topology.</p><p>Now you should do the same for the other four peers. Be mindful not to mix up which address goes which, replace <code>irohaX</code> with <code>127.0.0.1</code> in the addresses, and make sure that they correspond to the right public key.</p><p>This is messy, and error-prone, which is why the tutorial uses <code>docker-compose</code>. However, this brings you closer to the experience of actually maintaining a functional Iroha peer.</p><h2 id="files-deploy-a-minimal-bft-network" tabindex="-1">Files: deploy a minimal BFT network <a class="header-anchor" href="#files-deploy-a-minimal-bft-network" aria-hidden="true">#</a></h2><p>Our first peer can run off of the original configuration file. What we should do is create three more similar files and move them to three different folders e.g. <code>peer1</code>, <code>peer2</code>. What you need to do is change the <code>TORII:P2P_ADDR</code>, <code>TORII:API_URL</code> <code>TORII:STATUS_URL</code> and the <code>PUBLIC_KEY</code> configuration options to align with their <code>docker-compose.yml</code> counterparts. Then in each of the new folders (<code>peer1</code>, <code>peer2</code> etc.) run:</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">iroha</span></span>
<span class="line"></span></code></pre></div><p>except for one. In the first folder <code>peer0</code> you should instead run</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">iroha --submit-genesis</span></span>
<span class="line"></span></code></pre></div><p>We effectively asked this peer to <code>--submit</code> or <code>--submit-genesis</code> in the initial or <em>bootstrap</em> network. This means that in the initial network topology, this peer is the leader.</p><div class="info custom-block"><p class="custom-block-title">Note</p><p>Only the leader of the genesis network needs to have access to <code>genesis.json</code>. Having the same genesis in the initial folders of the other peers could be useful, since future versions of <code>iroha</code> will also sanity-check the genesis blocks.</p><p>Now you should do the same for the other four peers. Be mindful not to mix up which address goes which, replace <code>irohaX</code> with <code>127.0.0.1</code> in the addresses, and make sure that they correspond to the right public key.</p><p>This is messy, and error-prone, which is why the tutorial uses <code>docker-compose</code>. However, this brings you closer to the experience of actually maintaining a functional Iroha peer.</p><p>If all went well, you should be greeted with nice logs on each of the nodes, and the nodes should commit the blocks to the <code>blocks/</code> directory.</p><h2 id="real-world-deployment" tabindex="-1">Real-world deployment <a class="header-anchor" href="#real-world-deployment" aria-hidden="true">#</a></h2><p>Suppose now, that you have done all of the tinkering and want to deploy Iroha in the real world. Firstly, you should build it in release mode:</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">cargo build --release</span></span>
<span class="line"></span></code></pre></div><p>Secondly, you want to generate a key pair for your peer:</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">cargo run --bin iroha_crypto_cli</span></span>
<span class="line"></span></code></pre></div><p>And take not of that key. Thirdly, you should register your peer to a network, and make sure to add at least four of the peers on that network to the <code>TRUSTED_PEERS</code> array in your configuration file. You then determine the web socket that the other peers will use to connect to you. Make sure that the port is open and use that Address in your <code>config.json</code>. Finally, after you finished editing the configuration file iroha is deployed by running</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">~</span><span style="color:#24292F;">/Git/iroha/target/release/iroha</span></span>
<span class="line"></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">Note</p><p>There\u2019s no need to pass the <code>--submit</code> flag, unless you are starting the initial peer on the network.</p></div></div>`,50),p=[l];function c(r,i,d,u,h,y){return a(),e("div",null,p)}var m=s(t,[["render",c]]);export{b as __pageData,m as default};
