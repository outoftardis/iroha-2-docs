import{_ as s,c as e,o as a,d as o}from"./app.ced819ec.js";const g='{"title":"Triggers in more detail","description":"","frontmatter":{},"headers":[{"level":3,"title":"Supported ISI","slug":"supported-isi"},{"level":3,"title":"Supported queries","slug":"supported-queries"},{"level":2,"title":"The Anatomy of a trigger","slug":"the-anatomy-of-a-trigger"},{"level":2,"title":"How triggers work","slug":"how-triggers-work"},{"level":3,"title":"Event triggers","slug":"event-triggers"},{"level":3,"title":"Timed triggers","slug":"timed-triggers"},{"level":3,"title":"Block-based triggers","slug":"block-based-triggers"},{"level":3,"title":"By-call triggers","slug":"by-call-triggers"},{"level":2,"title":"Triggers by example","slug":"triggers-by-example"},{"level":2,"title":"How it works.","slug":"how-it-works"},{"level":3,"title":"Why not WASM","slug":"why-not-wasm"}],"relativePath":"guide/advanced/triggers.md","lastUpdated":1649230251000}',n={},t=o(`<h1 id="triggers-in-more-detail" tabindex="-1">Triggers in more detail <a class="header-anchor" href="#triggers-in-more-detail" aria-hidden="true">#</a></h1><h3 id="supported-isi" tabindex="-1">Supported ISI <a class="header-anchor" href="#supported-isi" aria-hidden="true">#</a></h3><p><code>Register&lt;Trigger&gt;</code>: Create a trigger object, and subscribe it to global events.</p><p><code>Unregister&lt;Trigger&gt;</code>: Remove a trigger from the World State View and stop passing it events.</p><p><code>Mint&lt;Trigger, u32&gt;</code>: For triggers that repeat a set number of times, increase the number of times that the trigger gets executed. Can be done from inside the executable of the trigger.</p><p><code>Burn&lt;Trigger, u32&gt;</code>: For triggers that repeat a set number of times, decrease the number of times that the trigger gets executed.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If the number provided is greater than the remaining number of repetitions, the instruction will fail to execute, and the transaction that it&#39;s part of will, be rejected.</p></div><h3 id="supported-queries" tabindex="-1">Supported queries <a class="header-anchor" href="#supported-queries" aria-hidden="true">#</a></h3><p>None yet.</p><h2 id="the-anatomy-of-a-trigger" tabindex="-1">The Anatomy of a trigger <a class="header-anchor" href="#the-anatomy-of-a-trigger" aria-hidden="true">#</a></h2><p>A trigger has the following rough form:</p><div class="language-rust"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"></span>
<span class="line"><span style="color:#CF222E;">struct</span><span style="color:#24292F;"> </span><span style="color:#953800;">Trigger</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">  id</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">TriggerId</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">  action</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Action</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">  metadata</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Metadata</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">}</span></span>
<span class="line"></span></code></pre></div><p>where the <code>TriggerId</code> is a simple wrapper around a single <code>Name</code>, i.e. string with no white-space and no reserved characters (<code>@</code>, <code>#</code>). In the future, we shall add scoped triggers, and the Id will be expanded to be either a global trigger, or a trigger with a domain name. This is what determines the scope of the trigger.</p><p><code>Metadata</code> is the same kind of <code>Metadata</code> that can be attached to accounts, domains, assets and even transactions. In the future, such <code>Metadata</code> would also be possible to use as a persistent key-value store unique to the trigger, alongside <code>KeyValue</code> assets.</p><p>An <code>Action</code> is the heart of the trigger.</p><div class="language-rust"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"></span>
<span class="line"><span style="color:#CF222E;">struct</span><span style="color:#24292F;"> </span><span style="color:#953800;">Action</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">  executable</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Executable</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">  repeats</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Repeats</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">  technical_account</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">AccountId</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">  filter</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">EventFilter</span></span>
<span class="line"><span style="color:#24292F;">}</span></span>
<span class="line"></span></code></pre></div><p>Here the executable is either a <code>Vec&lt;Instruction&gt;</code> or a WASM binary. The repeats is a universal enumeration of all possible repetition schemes.</p><div class="language-rust"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">enum</span><span style="color:#24292F;"> </span><span style="color:#953800;">Repeats</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">Indefinitely</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#8250DF;">Exactly</span><span style="color:#24292F;">(</span><span style="color:#953800;">u32</span><span style="color:#24292F;">),</span></span>
<span class="line"><span style="color:#24292F;">}</span></span>
<span class="line"></span></code></pre></div><p>A technical account is the account that would (in theory) be responsible for the execution environment and be the authority for <code>Instruction</code> execution. You can (for now) leave this to be the account that registered the trigger, that is, if you followed the tutorial, <code>alice@wonderland</code>. However, later on we will show you why you&#39;d want to create a brand new account for those purposes.</p><p>A filter is what determines the <em>kind</em> of trigger that you&#39;re dealing with. All triggers respond to events, but the precise type of event that activates a trigger depends on which <code>EventFilter</code> was used. The reason why we chose this architecture is simple; front end code has an abundance of event filters, and so your knowledge of filters is transferable to writing smartcontracts.</p><h2 id="how-triggers-work" tabindex="-1">How triggers work <a class="header-anchor" href="#how-triggers-work" aria-hidden="true">#</a></h2><p>Once we&#39;re done with triggers, you will have the following basic types:</p><ol><li>Event triggers</li><li>Timed triggers</li><li>By-call triggers</li><li>Block-based triggers</li></ol><p>Each of these shall be covered in its own right, and some information shall be provided on how to use each of them in detail. Both this tutorial and triggers themselves are under construction; some triggers don&#39;t exist yet, the API of others will change drastically in the following release. We shall do our best to describe all of what we can, with as much detail as we can, and clearly signpost which parts of this tutorial will be made obsolete in the next release.</p><h3 id="event-triggers" tabindex="-1">Event triggers <a class="header-anchor" href="#event-triggers" aria-hidden="true">#</a></h3><p>As we have said previously, all triggers are, in a sense, event triggers. However, this category includes the largest variety of triggers: an account got registered, an asset got transferred, the Queen of Hearts decided to burn all of her assets. These types of events account for the vast majority of triggers in Ethereum, and were the first to be implemented. As of today we only support un-scoped system-wide triggers with no permission validation. Work is ongoing to make the triggers more safe and reliable, but the process is time-consuming and work-intensive.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Be mindful of the limitations. Currently triggers don&#39;t check for permissions, so they can do things your account wouldn&#39;t be allowed to. Since the triggers are not scoped, every trigger processes <em>every</em> event, and the amount of work grows quadratically.</p></div><p>Each such trigger can be set to repeat either <code>Indefinitely</code> or <code>Exactly(n)</code> times, where <code>n</code> is a 32-bit integer. Once the number of repetitions reaches zero, the trigger is gone. That means that if your trigger got repeated exactly <code>n</code> times, you can&#39;t <code>Mint</code> new repetitions, you have to <code>Register</code> it again, with the same name.</p><p>TODO: test if reaches zero needs to re-register.</p><h3 id="timed-triggers" tabindex="-1">Timed triggers <a class="header-anchor" href="#timed-triggers" aria-hidden="true">#</a></h3><p>Same as event triggers, but they behave slightly\u2122 differently. Instead of processing all the events generated by the normal transactions, all timed triggers process one event: the block formation event. Specifically, the filters are only interested in the timestamp provided in that event, but not the block height, and not the current time.</p><p>When going through consensus, all peers must agree on which triggers got executed. Timed triggers can&#39;t use the real time, because you can easily create a situation when they would never agree: just make sure that the <code>Repeats::Indefinitely</code> trigger has a period that&#39;s smaller than the time it takes to pass consensus. It&#39;s really that simple. So instead of using the actual current time at each peer, we use the time when the block got started plus a small offset. All triggers before that point in time get executed. All triggers that would have executed after that time wait until the next block.</p><p>The reason why we add this offset, has to do with Iroha being <em>best effort</em>. Imagine that we didn&#39;t have the offset. Normally, triggers would be set to nice round numbers, e.g. <code>12:00</code>, <code>12:05</code>, <code>11:55</code>, etc. as opposed to e.g. <code>11:59</code>. However, the consensus can start at any point in time and could last a while. Suppose that the block started to form at <code>11:56</code> and consensus finished at <code>12:03</code> (which is optimistically quick). If your trigger was supposed to run at <code>11:55</code> you&#39;d be happy, since your trigger got executed just 1 minute late. If yours was supposed to run at <code>12:05</code>, it will get run in the next block, but if you&#39;re the author, and you&#39;re looking at the time stamp of <code>12:03</code> it makes sense, your trigger wasn&#39;t supposed to run yet. For the trigger scheduled for <code>12:00</code> the situation is different. You look at the clock, you see <code>12:03</code> which is when the blockchain explorer shows you the block data committed, but you don&#39;t see your trigger. It was supposed to run, but didn&#39;t.</p><p>So, the offset is meant to anticipate when the block would get added to the chain, so that people who were just 4 minutes early don&#39;t have to be potentially several hours late. Because more triggers get executed sooner, your throughput is also infinitesimally smaller. We could also say &quot;you should aim to execute your trigger slightly earlier than consensus starts&quot;, but people writing smartcontracts already have too much to worry about.</p><h3 id="block-based-triggers" tabindex="-1">Block-based triggers <a class="header-anchor" href="#block-based-triggers" aria-hidden="true">#</a></h3><p>Same as timed triggers, but instead of only being interested in the time-stamp, this trigger is interested in the block height. While the mechanism for the triggers is similar the use cases are different.</p><h3 id="by-call-triggers" tabindex="-1">By-call triggers <a class="header-anchor" href="#by-call-triggers" aria-hidden="true">#</a></h3><p>These triggers get executed only once the <code>CallTrigger(trigger_name)</code> instruction is executed. These can be useful if you want to achieve dynamic linkage between different smartcontract modules. Space is precious, so want to use as little of it as you can. So you follow the UNIX design philosophy, and instead of creating one large smartcontract, you create many smaller ones, and re-use as much logic as you can.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Of course, this is a rather exotic use case, so it shall be implemented last</p></div><h2 id="triggers-by-example" tabindex="-1">Triggers by example <a class="header-anchor" href="#triggers-by-example" aria-hidden="true">#</a></h2><p>Now that we&#39;ve gotten the theory out of the way, we want to sit down with the Mad Hatter, the March Hare, and the Dormouse and see if we can spin.</p><p>Let&#39;s start with an event trigger that shows the basics.</p><p>We have <code>mad_hatter@wonderland</code>, <code>dormouse@wonderland</code>, <code>march_hare@wonderland</code> all of which share the (fixed-point) asset of <code>tea#wonderland</code>. The Mad hatter has the tea pot, while the rest have a single cup of tea. When <code>alice@wonderland</code> had arrived, she got a nice cup of tea as well.</p><p>The way we get them in Rust code looks like this:</p><div class="language-rust"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> tea </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#953800;">AssetDefinitionId</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&quot;tea&quot;</span><span style="color:#24292F;">, </span><span style="color:#0A3069;">&quot;wonderland&quot;</span><span style="color:#24292F;">)</span><span style="color:#CF222E;">?</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> mad_hatter </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#953800;">AccountId</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&quot;mad_hatter&quot;</span><span style="color:#24292F;">, </span><span style="color:#0A3069;">&quot;wonderland&quot;</span><span style="color:#24292F;">)</span><span style="color:#CF222E;">?</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> dormouse </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#953800;">AccountId</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&quot;dormouse&quot;</span><span style="color:#24292F;">, </span><span style="color:#0A3069;">&quot;wonderland&quot;</span><span style="color:#24292F;">)</span><span style="color:#CF222E;">?</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> march_hare </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#953800;">AccountId</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&quot;march_hare&quot;</span><span style="color:#24292F;">, </span><span style="color:#0A3069;">&quot;wonderland&quot;</span><span style="color:#24292F;">)</span><span style="color:#CF222E;">?</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#8250DF;">vec!</span><span style="color:#24292F;">[</span></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">RegisterBox</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(</span><span style="color:#953800;">IdentifiableBox</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">from</span><span style="color:#24292F;">(</span><span style="color:#953800;">NewAccount</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(mad_hatter</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">clone</span><span style="color:#24292F;">()))),</span></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">RegisterBox</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(</span><span style="color:#953800;">IdentifiableBox</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">from</span><span style="color:#24292F;">(</span><span style="color:#953800;">NewAccount</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(march_hare</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">clone</span><span style="color:#24292F;">()))),</span></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">RegisterBox</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(</span><span style="color:#953800;">IdentifiableBox</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">from</span><span style="color:#24292F;">(</span><span style="color:#953800;">NewAccount</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(dormouse</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">clone</span><span style="color:#24292F;">()))),</span></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">RegisterBox</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(</span><span style="color:#953800;">IdentifiableBox</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">from</span><span style="color:#24292F;">(</span><span style="color:#953800;">AssetDefinition</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new_fixed</span><span style="color:#24292F;">(tea</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">clone</span><span style="color:#24292F;">()))),</span></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">MintBox</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(</span><span style="color:#953800;">Value</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">Fixed</span><span style="color:#24292F;">(</span><span style="color:#0550AE;">100.0_</span><span style="color:#953800;">f64</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">try_into</span><span style="color:#24292F;">()</span><span style="color:#CF222E;">?</span><span style="color:#24292F;">), </span><span style="color:#953800;">IdBox</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">AssetId</span><span style="color:#24292F;">(</span><span style="color:#953800;">AssetId</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(tea</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">clone</span><span style="color:#24292F;">(), mad_hatter</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">clone</span><span style="color:#24292F;">())))</span></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">MintBox</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(</span><span style="color:#953800;">Value</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">Fixed</span><span style="color:#24292F;">(</span><span style="color:#0550AE;">1.0_</span><span style="color:#953800;">f64</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">try_into</span><span style="color:#24292F;">()</span><span style="color:#CF222E;">?</span><span style="color:#24292F;">), </span><span style="color:#953800;">IdBox</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">AssetId</span><span style="color:#24292F;">(</span><span style="color:#953800;">AssetId</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(tea</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">clone</span><span style="color:#24292F;">(), march_hare</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">clone</span><span style="color:#24292F;">())))</span></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">MintBox</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(</span><span style="color:#953800;">Value</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">Fixed</span><span style="color:#24292F;">(</span><span style="color:#0550AE;">1.0_</span><span style="color:#953800;">f64</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">try_into</span><span style="color:#24292F;">()</span><span style="color:#CF222E;">?</span><span style="color:#24292F;">), </span><span style="color:#953800;">IdBox</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">AssetId</span><span style="color:#24292F;">(</span><span style="color:#953800;">AssetId</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(tea</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">clone</span><span style="color:#24292F;">(), dormouse</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">clone</span><span style="color:#24292F;">())))</span></span>
<span class="line"><span style="color:#24292F;">  </span><span style="color:#953800;">MintBox</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(</span><span style="color:#953800;">Value</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">Fixed</span><span style="color:#24292F;">(</span><span style="color:#0550AE;">1.0_</span><span style="color:#953800;">f64</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">try_into</span><span style="color:#24292F;">()</span><span style="color:#CF222E;">?</span><span style="color:#24292F;">), </span><span style="color:#953800;">IdBox</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">AssetId</span><span style="color:#24292F;">(</span><span style="color:#953800;">AssetId</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(tea</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">clone</span><span style="color:#24292F;">(), alice</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">clone</span><span style="color:#24292F;">())))</span></span>
<span class="line"><span style="color:#24292F;">]</span></span>
<span class="line"></span></code></pre></div><p>so far so good.</p><p>We want a smartcontract that transfers some <code>tea</code> from <code>mad_hatter@wonderland</code> to <code>alice@wonderland</code> when her tea reduces by a single cup.</p><p>For that we need to register a trigger. The boilerplate is straightforward</p><div class="language-rust"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> id </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#953800;">TriggerId</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(</span><span style="color:#953800;">Name</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&quot;refresh_tea&quot;</span><span style="color:#24292F;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> metadata </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#953800;">Metadata</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> executable </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">vec!</span><span style="color:#24292F;">[</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#953800;">TransferBox</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#953800;">IdBox</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">AssetId</span><span style="color:#24292F;">(</span><span style="color:#953800;">AssetId</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(tea</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">clone</span><span style="color:#24292F;">(), mad_hatter</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">clone</span><span style="color:#24292F;">())),</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#953800;">Value</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">Fixed</span><span style="color:#24292F;">(</span><span style="color:#0550AE;">1_</span><span style="color:#953800;">f64</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">try_into</span><span style="color:#24292F;">()</span><span style="color:#CF222E;">?</span><span style="color:#24292F;">),</span></span>
<span class="line"><span style="color:#24292F;">      </span><span style="color:#953800;">IdBox</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">AssetId</span><span style="color:#24292F;">(</span><span style="color:#953800;">AssetId</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(alice</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">clone</span><span style="color:#24292F;">(), mad_hatter</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">clone</span><span style="color:#24292F;">())),</span></span>
<span class="line"><span style="color:#24292F;">    )</span></span>
<span class="line"><span style="color:#24292F;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> repeats </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#953800;">Repeats</span><span style="color:#CF222E;">::</span><span style="color:#953800;">Indefinitely</span><span style="color:#24292F;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> technical_account </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> mad_hatter</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">clone</span><span style="color:#24292F;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> filter </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> \u2026</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>the event filter is where we need to spend some time and think. So far we&#39;ve seen the <code>Pipeline</code> variety of filters. This time around, the filter is a <code>Data</code> kind, which is itself a tuple with a single variant, which is a <code>FilterOpt</code> of an <code>EntityFilter</code>.</p><p><code>FilterOpt</code> stands for Optional Filter. It can either <code>AcceptAll</code>, or accept <code>BySome</code> of another <code>Filter</code>. An <code>EntityFilter</code> is a filter that matches <code>ByAccount</code> in our case, but can match by many other means. It wraps an <code>AccountFilter</code>, which matches on various events produced on accounts. We need to listen for an event that occurs when Alice&#39;s asset is reduced: so we need <code>AccountEventFilter::ByAsset</code>. That itself is an <code>AssetEventFilter</code>. It should filter <code>ByRemoved</code> (but not <code>ByDeleted</code>). <strong>It should be noted that the names are subject to change, as they are confusing.</strong></p><p>This gets us nowhere, and a big problem in our current API, that we&#39;re trying to solve. Instead we should work bottom up.</p><p>To learn the ropes of <code>EventFilters</code> start simple. An <code>IdFilter</code> is a filter that <code>.matches(event) == true</code>, if and only if the identities are exactly the same. Everything that has an <code>Id</code> has a corresponding <code>IdFilter</code>. However, an <code>IdFilter</code> is a parametric structure, an <code>IdFilter</code> that works on <code>Peer</code>s has the type <code>IdFilter&lt;PeerId&gt;</code> and is not the same type as an <code>IdFilter</code> that works with <code>AccountId</code>; <code>IdFilter&lt;AccountId</code>. We&#39;ve already talked about <code>FilterOpt</code>.</p><p>Now if we wanted a filter that will <code>match</code> whenever <code>tea</code> gets reduced, either through a <code>Transfer</code> or a <code>Burn</code> instruction, we need an <code>AssetFilter</code>. It needs to look at both what the <code>Id</code> of the asset is, hence <code>IdFilter&lt;AssetDefinitionId&gt;</code> and <code>ByRemoved</code>.</p><div class="language-rust"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">use</span><span style="color:#24292F;"> </span><span style="color:#953800;">FilterOpt</span><span style="color:#CF222E;">::</span><span style="color:#24292F;">{</span><span style="color:#953800;">BySome</span><span style="color:#24292F;">, </span><span style="color:#953800;">AcceptAll</span><span style="color:#24292F;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> asset_filter </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#953800;">AssetFilter</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(</span><span style="color:#8250DF;">BySome</span><span style="color:#24292F;">(</span><span style="color:#8250DF;">IdFilter</span><span style="color:#24292F;">(tea</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">clone</span><span style="color:#24292F;">())), </span><span style="color:#8250DF;">BySome</span><span style="color:#24292F;">(</span><span style="color:#953800;">AssetEventFilter</span><span style="color:#CF222E;">::</span><span style="color:#953800;">ByRemoved</span><span style="color:#24292F;">));</span></span>
<span class="line"></span></code></pre></div><p>So far so good?</p><p>Next, we want a filter that looks for changes in an asset for an account. Specifically:</p><div class="language-rust"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> account_filter </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#953800;">AccountFilter</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(</span><span style="color:#8250DF;">BySome</span><span style="color:#24292F;">(</span><span style="color:#8250DF;">IdFilter</span><span style="color:#24292F;">(alice</span><span style="color:#CF222E;">.</span><span style="color:#8250DF;">clone</span><span style="color:#24292F;">())), </span><span style="color:#8250DF;">BySome</span><span style="color:#24292F;">(asset_filter));</span></span>
<span class="line"></span></code></pre></div><p>Now, because of the way that <code>parity_scale_codec</code> works, we need to wrap this in various boxes.</p><div class="language-rust"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> filter </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#953800;">EventFilter</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">Data</span><span style="color:#24292F;">(</span><span style="color:#8250DF;">BySome</span><span style="color:#24292F;">(</span><span style="color:#953800;">EntityFilter</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">ByAccount</span><span style="color:#24292F;">(account_filter)));</span></span>
<span class="line"></span></code></pre></div><p>After this somewhat laborious filter combination, we can create an <code>Action</code></p><div class="language-rust"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> action </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#953800;">Action</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">    executable, repeats, technical_account, filter</span></span>
<span class="line"><span style="color:#24292F;">}</span></span>
<span class="line"></span></code></pre></div><p>which allows us to create an instance of a <code>Trigger</code>.</p><div class="language-rust"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">let</span><span style="color:#24292F;"> trigger </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#953800;">Trigger</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">    id, action, metadata</span></span>
<span class="line"><span style="color:#24292F;">}</span></span>
<span class="line"></span></code></pre></div><p>Finally, in order to get said trigger onto the blockchain, we create a transaction with the following single instruction.</p><div class="language-rust"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#953800;">Instruction</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">Register</span><span style="color:#24292F;">(</span><span style="color:#953800;">RegisterBox</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(</span><span style="color:#953800;">IdentifiableBox</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">Trigger</span><span style="color:#24292F;">(</span><span style="color:#953800;">Box</span><span style="color:#CF222E;">::</span><span style="color:#8250DF;">new</span><span style="color:#24292F;">(trigger))));</span></span>
<span class="line"></span></code></pre></div><h2 id="how-it-works" tabindex="-1">How it works. <a class="header-anchor" href="#how-it-works" aria-hidden="true">#</a></h2><p>The technical details are summarised as follows:</p><ol><li>The (normal) instructions that either got submitted from WASM or directly from the client get executed. If there were any triggers that should have been registered, they get registered now.</li><li>Using the total set of events that got generated during the execution of instructions, the triggers (including some that got registered just this round) get executed.</li><li>The events produced in the previous step get scheduled for execution in the next block.</li></ol><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The reason why the events caused by the execution of triggers get processed in the next block is simple. We don&#39;t want two triggers to inadvertently cause an infinite loop of instruction execution, and break consensus.</p></div><p>Now, each time Alice drinks some tea, the Mad Hatter will pour in a whole new cup. The keen eyed among you will have noticed that the amount that Alice drinks is irrelevant to how much tea will be transferred. Alice may well take a tiny sip and be poured a whole new cup&#39;s worth.</p><p>We intend to address this issue in the future, when the event that gets emitted also has an attached Value. We also intend to provide more event filter types. For example, we will have filters that match when the asset</p><ol><li>Decreases by any amount (current behaviour).</li><li>Decreases by more than (or exactly) the specific amount in one instruction.</li><li>Decreases to below a certain threshold.</li></ol><p>Only the first type of event filter is implemented now, and the other two can be emulated using a WASM smartcontract as the <code>Executable</code>.</p><h3 id="why-not-wasm" tabindex="-1">Why not WASM <a class="header-anchor" href="#why-not-wasm" aria-hidden="true">#</a></h3><p>The above observation can be generalised. WASM can do any logic that a Turing complete machine could using the data available via queries. So in theory for event-based triggers, you could create an <code>AcceptAll</code> event filter and do all of the processing using the key-value store as persistent storage, and determining if you want to execute using easy to understand Rust code, and not our admittedly cumbersome, <code>EventFilters</code>. We don&#39;t want that. WASM takes up significantly more space, and takes longer to execute compared to plain ISI, which are slower than <code>EventFilters</code>. We want you to want to use the <code>EventFilters</code> because they would make the process much more efficient, and are working tirelessly to make the experience of using event filters much less cumbersome.</p><p>However, as was mentioned on several occasions previously, implementing a feature well takes time and effort. Ergonomics must be balanced against safety and reliability, so we cannot just make things more easy to use. We want them to retain many of the advantages of strong typing.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>This is all a work in progress. Our code is in flux. We need time to play around with a particular implementation to optimise it.</p></div>`,78),l=[t];function r(p,c,i,d,y,h){return a(),e("div",null,l)}var u=s(n,[["render",r]]);export{g as __pageData,u as default};
