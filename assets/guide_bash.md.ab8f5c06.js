import{_ as s,c as a,o as n,d as e}from"./app.ced819ec.js";const g='{"title":"Bash guide","description":"","frontmatter":{},"headers":[{"level":2,"title":"0. A brief primer on CLI applications","slug":"_0-a-brief-primer-on-cli-applications"},{"level":2,"title":"1. Iroha 2 Client Setup","slug":"_1-iroha-2-client-setup"},{"level":2,"title":"2. Configuring Iroha 2","slug":"_2-configuring-iroha-2"},{"level":2,"title":"3. Registering a Domain","slug":"_3-registering-a-domain"},{"level":2,"title":"4. Registering an Account","slug":"_4-registering-an-account"},{"level":2,"title":"5. Registering and minting assets","slug":"_5-registering-and-minting-assets"},{"level":2,"title":"6. Visualizing outputs","slug":"_6-visualizing-outputs"}],"relativePath":"guide/bash.md","lastUpdated":1649230251000}',o={},l=e(`<h1 id="bash-guide" tabindex="-1">Bash guide <a class="header-anchor" href="#bash-guide" aria-hidden="true">#</a></h1><h2 id="_0-a-brief-primer-on-cli-applications" tabindex="-1">0. A brief primer on CLI applications <a class="header-anchor" href="#_0-a-brief-primer-on-cli-applications" aria-hidden="true">#</a></h2><p>This is as good a place as any to discuss what <code>iroha_client_cli</code> is and what you should expect it to be able to do. Most users think that everything that&#39;s run inside the terminal is a CLI program. This is not the case. A <strong>Command-line Interface</strong> is a glorified scripting language, that you interact with using the shell. These programs are run multiple times and given different <em>arguments</em>: <code>--flag1</code> <code>file2</code><code>--help</code>, etc, depending on what you want to do. A single session doesn&#39;t begin with you opening the program and end with you closing it. When you&#39;ve stopped interacting, the <code>iroha_client_cli</code> the session is finished.</p><p>You also don&#39;t <em>configure</em> a CLI program in the usual sense of the word. Most people expect that it&#39;s possible to change some settings of a program, from inside that same program, but most CLI programs are configured differently.</p><p>First of all, if you want to make a certain <code>--flag</code> part of the way you invoke <code>iroha_client_cli</code>, you should create a <a href="https://www.educba.com/bash-alias/" target="_blank" rel="noopener noreferrer">shell alias</a>. Some programs, but not <code>iroha_client_cli</code> also use something called <a href="https://medium.com/chingu/an-introduction-to-environment-variables-and-how-to-use-them-f602f66d15fa" target="_blank" rel="noopener noreferrer">Environment variables</a>.</p><p>Finally, most programs store persistent information that is too big for either a shell alias or an environment variable in a separate file. <code>iroha_client_cli</code> does not yet follow the <a href="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html" target="_blank" rel="noopener noreferrer">XDG_CONFIG_HOME specification</a>. And only looks for a configuration file in one of two places.</p><ol><li>if the <code>-c</code> or <code>--config</code> command line flag is specified, in the next argument interpreted as a path; for example: <code>-c ~/Git/iroha/configs/peer/config.json</code>. If that file doesn&#39;t exist, you will see an error, and <code>iroha_client_cli</code> won&#39;t look for a configuration file anywhere else.</li><li>if neither <code>-c</code> nor <code>--config</code> were given, it will look in the current working directory.</li></ol><p>These defaults are not very ergonomic. They are artifacts of the way in which Iroha is being deployed, and the fact that a CLI interface is used exclusively for testing purposes. This might change in the future, but likely not by fixing <code>iroha_client_cli</code> but rather by replacing it entirely with Iroha Python. The only thing stopping us from that today is that Iroha pyhton has not gotten the attention it deserves.</p><p>It is possible that a user might be expecting <code>iroha_client_cli</code> to behave like a graphical program using terminal graphics: a <strong>Terminal User Interface</strong>. While we&#39;d like to provide you with such a program, we don&#39;t think that it offers enough convenience over the amount of effort that we&#39;d need to put in. It is possible that in the future, once <code>iroha_client_cli</code> is phased out and <code>iroha_python</code> is the official scripting interface, we might use the excellent Python libraries for creating a useful TUI. For now, one must make do with what one has.</p><h2 id="_1-iroha-2-client-setup" tabindex="-1">1. Iroha 2 Client Setup <a class="header-anchor" href="#_1-iroha-2-client-setup" aria-hidden="true">#</a></h2><p>Note, first, that we have already created the <code>iroha_client_cli</code> binary executable, when we ran the build command.</p><p>Create a fresh directory for the client</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">mkdir -p test_docker</span></span>
<span class="line"></span></code></pre></div><p>Copy the configuration file to the client directory</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">cp ./configs/client_cli/config.json test_docker/</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You could also use a file manager (e.g. finder) to do that. We prefer providing command-line instructions, because it&#39;s easier to follow step-by-step.</p></div><p>To test Iroha 2&#39;s metadata capabilities, let&#39;s also create a dummy <code>metadata.json</code> file.</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#0550AE;">echo</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;{&quot;comment&quot;:{&quot;String&quot;: &quot;Hello Meta!&quot;}}&#39;</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;"> test_docker/metadata.json</span></span>
<span class="line"></span></code></pre></div><p>To get the CLI started, copy the <code>iroha_client_cli</code> binary into the client directory</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">cp ./target/debug/iroha_client_cli test_docker/</span></span>
<span class="line"></span></code></pre></div><p>Make sure you bring up the test network as well.</p><h2 id="_2-configuring-iroha-2" tabindex="-1">2. Configuring Iroha 2 <a class="header-anchor" href="#_2-configuring-iroha-2" aria-hidden="true">#</a></h2><p>Now let&#39;s look at how to properly configure Iroha 2, and especially its <strong>C</strong>ommand-<strong>L</strong>ine <strong>I</strong>nterface client.</p><p>Make sure that you have another terminal tab/window with a running version, using the instructions above. You can use this screen to monitor the pipeline events as they are output.</p><p>On a new terminal tab run</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#0550AE;">cd</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">~</span><span style="color:#24292F;">/Git/iroha/test_docker</span></span>
<span class="line"></span></code></pre></div><p>If you followed the steps correctly, this should contain the <code>iroha_client_cli</code> and <code>config.json</code>, (<code>ls</code> to make sure, and if not, see previous section).</p><p>Run</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">./iroha_client_cli</span></span>
<span class="line"></span></code></pre></div><p>And you will get the following message:</p><div class="language-"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292f;">iroha_client_cli 0.1.0</span></span>
<span class="line"><span style="color:#24292f;">Soramitsu Iroha2 team (https, //github.com/orgs/soramitsu/teams/iroha2)</span></span>
<span class="line"><span style="color:#24292f;">Iroha CLI Client provides an ability to interact with Iroha Peers Web API without direct network usage</span></span>
<span class="line"><span style="color:#24292f;"></span></span>
<span class="line"><span style="color:#24292f;">USAGE:</span></span>
<span class="line"><span style="color:#24292f;">    iroha_client_cli [OPTIONS] &lt;SUBCOMMAND&gt;</span></span>
<span class="line"><span style="color:#24292f;"></span></span>
<span class="line"><span style="color:#24292f;">FLAGS:</span></span>
<span class="line"><span style="color:#24292f;">    -h, --help       Prints help information</span></span>
<span class="line"><span style="color:#24292f;">    -V, --version    Prints version information</span></span>
<span class="line"><span style="color:#24292f;"></span></span>
<span class="line"><span style="color:#24292f;">OPTIONS:</span></span>
<span class="line"><span style="color:#24292f;">    -c, --config &lt;config&gt;    Sets a config file path [default: config.json]</span></span>
<span class="line"><span style="color:#24292f;"></span></span>
<span class="line"><span style="color:#24292f;">SUBCOMMANDS:</span></span>
<span class="line"><span style="color:#24292f;">    account    The subcommand related to accounts</span></span>
<span class="line"><span style="color:#24292f;">    asset      The subcommand related to assets</span></span>
<span class="line"><span style="color:#24292f;">    domain     The subcommand related to domains</span></span>
<span class="line"><span style="color:#24292f;">    events     The subcommand related to event streaming</span></span>
<span class="line"><span style="color:#24292f;">    help       Prints this message or the help of the given subcommand(s)</span></span>
<span class="line"><span style="color:#24292f;">    peer       The subcommand related to p2p networking</span></span>
<span class="line"><span style="color:#24292f;"></span></span></code></pre></div><p>To configure the Iroha client, run</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">./iroha_client_cli --config ./test_docker/config.json</span></span>
<span class="line"></span></code></pre></div><p>It should be noted that this is not <em>persistent configuration:</em> each time you run <code>iroha_client_cli</code> you must add the <code>--config ./test_docker/config.json</code>command-line argument.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Because the client looks in its working directory for a file called <code>config.json</code> it&#39;s always much easier to just copy (or link) the file into the working directory. Alternatively, you could also create a shell alias.</p></div><p>Feel free to edit the file and see what each option does. The only thing that you shouldn&#39;t edit at this point is the account. You see, <code>alice</code> has to be pre-registered in the genesis block. Only she can interact with the blockchain, and if you change the value of the user account, you should also make sure that that user exists in the blockchain.</p><p>To make sure that your configuration options worked, try to run a query, e.g.:</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">./iroha_client_cli domain list all</span></span>
<span class="line"></span></code></pre></div><p>If the output looks like some form of JSON (but not quite), then the configuration was succesful!</p><h2 id="_3-registering-a-domain" tabindex="-1">3. Registering a Domain <a class="header-anchor" href="#_3-registering-a-domain" aria-hidden="true">#</a></h2><p>To get started you must register a domain. Run</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">./iroha_client_cli domain register --id=</span><span style="color:#0A3069;">&quot;looking_glass&quot;</span></span>
<span class="line"></span></code></pre></div><p>You will receive a confirmation of the domain creation, however, this information will not be clearly visible within the message. To confirm the new domain <em>looking_glass</em> has been created successfully, run</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">./iroha_client_cli domain list all</span></span>
<span class="line"></span></code></pre></div><p>The printout should contain the recently-created <em>looking_glass</em> domain</p><div class="language-rust"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#953800;">Domain</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">    name</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;looking_glass&quot;</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">    accounts</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> {},</span></span>
<span class="line"><span style="color:#24292F;">    asset_definitions</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> {},</span></span>
<span class="line"><span style="color:#24292F;">    metadata</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Metadata</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        map</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> {},</span></span>
<span class="line"><span style="color:#24292F;">    },</span></span>
<span class="line"><span style="color:#24292F;">},</span></span>
<span class="line"></span></code></pre></div><p>With a domain available, it is time to register an account.</p><h2 id="_4-registering-an-account" tabindex="-1">4. Registering an Account <a class="header-anchor" href="#_4-registering-an-account" aria-hidden="true">#</a></h2><p>To register a new account within the <em>looking_glass</em> domain, run:</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">./iroha_client_cli account register \\</span></span>
<span class="line"><span style="color:#24292F;">    --id=</span><span style="color:#0A3069;">&quot;mad_hatter@looking_glass&quot;</span><span style="color:#24292F;"> \\</span></span>
<span class="line"><span style="color:#24292F;">    --key=</span><span style="color:#0A3069;">&quot;ed0120a753146e75b910ae5e2994dc8adea9e7d87e5d53024cfa310ce992f17106f92c&quot;</span></span>
<span class="line"></span></code></pre></div><p>If the account registration is successful, you will receive a confirmation message. Like before, it is necessary to query the accounts list to verify that <em>mad_hatter</em> has been registered.</p><p>To see all the accounts on the network, run</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">./iroha_client_cli account list all</span></span>
<span class="line"></span></code></pre></div><p>This will list the active accounts on the network, along with their assets</p><div class="language-rust"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#953800;">Account</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">    id</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Id</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        name</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;mad_hatter&quot;</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">        domain_name</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;looking_glass&quot;</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">    },</span></span>
<span class="line"><span style="color:#24292F;">    assets</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> {},</span></span>
<span class="line"><span style="color:#24292F;">    signatories</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> [</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#953800;">PublicKey</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        digest_function</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;ed25519&quot;</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">        payload</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;A753146E75B910AE5E2994DC8ADEA9E7D87E5D53024CFA310CE992F17106F92C&quot;</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">    },</span></span>
<span class="line"><span style="color:#24292F;">}</span></span>
<span class="line"></span></code></pre></div><p>Another way to create a user (and the user&#39;s keys) is as follows:</p><p>Open a new tab and navigate to the <code>/iroha</code> directory, then run</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">./target/debug/iroha_crypto_cli</span></span>
<span class="line"></span></code></pre></div><p>Copy the public key, and repeat the instructions for registering a new account. Every time you run this command, you will generate a new keypair.</p><p>In this case, we will create an account for <em>white_rabbit</em> within the <em>looking_glass</em> domain, so we will run</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">./iroha_client_cli account register \\</span></span>
<span class="line"><span style="color:#24292F;">    --id=</span><span style="color:#0A3069;">&quot;white_rabbit@looking_glass&quot;</span><span style="color:#24292F;"> \\</span></span>
<span class="line"><span style="color:#24292F;">    --key=</span><span style="color:#0A3069;">&quot;ed0120a4c4dadd9f18b0f63d6a420151fe0748d785475dec63034a15fcf999ceda1e65&quot;</span></span>
<span class="line"></span></code></pre></div><p>And like before, the new active user will be listed on the network</p><div class="language-rust"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#953800;">Account</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        id</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Id</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">            name</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;white_rabbit&quot;</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">            domain_name</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;looking_glass&quot;</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">        },</span></span>
<span class="line"><span style="color:#24292F;">        assets</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> {},</span></span>
<span class="line"><span style="color:#24292F;">        signatories</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> [</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#953800;">PublicKey</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                digest_function</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;ed25519&quot;</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">                payload</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;A4C4DADD9F18B0F63D6A420151FE0748D785475DEC63034A15FCF999CEDA1E65&quot;</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">            },</span></span>
<span class="line"><span style="color:#24292F;">        ]</span></span>
<span class="line"><span style="color:#24292F;">}</span></span>
<span class="line"></span></code></pre></div><p>Now that the network and users are registered, it is possible to mint assets.</p><h2 id="_5-registering-and-minting-assets" tabindex="-1">5. Registering and minting assets <a class="header-anchor" href="#_5-registering-and-minting-assets" aria-hidden="true">#</a></h2><p><strong>In order to mint assets, you need to register the asset first. We are going to register the <em>tea</em> token within the <em>looking_glass</em> network, to do that we will run</strong></p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">./iroha_client_cli asset register \\</span></span>
<span class="line"><span style="color:#24292F;">    --id=</span><span style="color:#0A3069;">&quot;tea#looking_glass&quot;</span><span style="color:#24292F;"> \\</span></span>
<span class="line"><span style="color:#24292F;">    --value-type=Quantity</span></span>
<span class="line"></span></code></pre></div><p>The <em>tea</em> asset is now registered within the <em>looking_glass</em> network, the output within the CLI is the same as with other commands, you will be able to see that there are new events in the pipeline.</p><p>With the asset created, now tokens need to be minted. Run:</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">./iroha_client_cli asset mint \\</span></span>
<span class="line"><span style="color:#24292F;">    --account=</span><span style="color:#0A3069;">&quot;mad_hatter@looking_glass&quot;</span><span style="color:#24292F;"> \\</span></span>
<span class="line"><span style="color:#24292F;">    --asset=</span><span style="color:#0A3069;">&quot;tea#looking_glass&quot;</span><span style="color:#24292F;"> \\</span></span>
<span class="line"><span style="color:#24292F;">    --quantity=</span><span style="color:#0A3069;">&quot;100&quot;</span></span>
<span class="line"></span></code></pre></div><p>After minting one hundred <em>tea</em>, you will see more pipeline events in the logger, and you can also query the assets that you have just minted:</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">./iroha_client_cli asset list all</span></span>
<span class="line"></span></code></pre></div><p>After running this command, you will be able to see the tokens currently available on the network:</p><div class="language-rust"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">[</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#953800;">Asset</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        id</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Id</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">            definition_id</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">DefinitionId</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                name</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;tea&quot;</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">                domain_name</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;looking_glass&quot;</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">            },</span></span>
<span class="line"><span style="color:#24292F;">            account_id</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Id</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                name</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;mad_hatter&quot;</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">                domain_name</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;looking_glass&quot;</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">            },</span></span>
<span class="line"><span style="color:#24292F;">        },</span></span>
<span class="line"><span style="color:#24292F;">        value</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">Quantity</span><span style="color:#24292F;">(</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#0550AE;">100</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">        ),</span></span>
<span class="line"><span style="color:#24292F;">    },</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#953800;">Asset</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        id</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Id</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">            definition_id</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">DefinitionId</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                name</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;rose&quot;</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">                domain_name</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;wonderland&quot;</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">            },</span></span>
<span class="line"><span style="color:#24292F;">            account_id</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Id</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">                name</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;alice&quot;</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">                domain_name</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;wonderland&quot;</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">            },</span></span>
<span class="line"><span style="color:#24292F;">        },</span></span>
<span class="line"><span style="color:#24292F;">        value</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">Quantity</span><span style="color:#24292F;">(</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#0550AE;">13</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">        ),</span></span>
<span class="line"><span style="color:#24292F;">    },</span></span>
<span class="line"><span style="color:#24292F;">]</span></span>
<span class="line"></span></code></pre></div><p>Iroha 2 currently doesn&#39;t validate the account names, so you could (in theory) add invalid characters to the name, like e.g. spaces. <strong>We recommend sticking to English alphanumeric characters and underscores</strong>.</p><h2 id="_6-visualizing-outputs" tabindex="-1">6. Visualizing outputs <a class="header-anchor" href="#_6-visualizing-outputs" aria-hidden="true">#</a></h2><p>Although you will get a constant data feed of the network within the terminal running docker compose, you can also configure an output to listen to events on the network.</p><p>From a terminal tab/window run</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">./iroha_client_cli events pipeline</span></span>
<span class="line"></span></code></pre></div><p>This view will output all the events related to Iroha 2, such as transactions, block validations, or data events, such as when the in-memory representation of the blockchain gets committed to the hard disk.</p><p>The output would look like this:</p><div class="language-rust"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#953800;">Iroha</span><span style="color:#24292F;"> </span><span style="color:#953800;">Client</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">CLI</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> build v0</span><span style="color:#CF222E;">.</span><span style="color:#0550AE;">0.1</span><span style="color:#24292F;"> [release]</span></span>
<span class="line"><span style="color:#953800;">User</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> alice</span><span style="color:#CF222E;">@</span><span style="color:#24292F;">wonderland</span></span>
<span class="line"><span style="color:#24292F;">{</span><span style="color:#0A3069;">&quot;PUBLIC_KEY&quot;</span><span style="color:#CF222E;">:</span><span style="color:#0A3069;">&quot;ed01207233bfc89dcbd68c19fde6ce6158225298ec1131b6a130d1aeb454c1ab5183c0&quot;</span><span style="color:#24292F;">,</span><span style="color:#0A3069;">&quot;PRIVATE_KEY&quot;</span><span style="color:#CF222E;">:</span><span style="color:#24292F;">{</span><span style="color:#0A3069;">&quot;digest_function&quot;</span><span style="color:#CF222E;">:</span><span style="color:#0A3069;">&quot;ed25519&quot;</span><span style="color:#24292F;">,</span><span style="color:#0A3069;">&quot;payload&quot;</span><span style="color:#CF222E;">:</span><span style="color:#0A3069;">&quot;9ac47abf59b356e0bd7dcbbbb4dec080e302156a48ca907e47cb6aea1d32719e7233bfc89dcbd68c19fde6ce6158225298ec1131b6a130d1aeb454c1ab5183c0&quot;</span><span style="color:#24292F;">},</span><span style="color:#0A3069;">&quot;ACCOUNT_ID&quot;</span><span style="color:#CF222E;">:</span><span style="color:#24292F;">{</span><span style="color:#0A3069;">&quot;name&quot;</span><span style="color:#CF222E;">:</span><span style="color:#0A3069;">&quot;alice&quot;</span><span style="color:#24292F;">,</span><span style="color:#0A3069;">&quot;domain_name&quot;</span><span style="color:#CF222E;">:</span><span style="color:#0A3069;">&quot;wonderland&quot;</span><span style="color:#24292F;">},</span><span style="color:#0A3069;">&quot;TORII_API_URL&quot;</span><span style="color:#CF222E;">:</span><span style="color:#0A3069;">&quot;http://127.0.0.1:8080&quot;</span><span style="color:#24292F;">,</span><span style="color:#0A3069;">&quot;TORII_STATUS_URL&quot;</span><span style="color:#CF222E;">:</span><span style="color:#0A3069;">&quot;127.0.0.1:8180&quot;</span><span style="color:#24292F;">,</span><span style="color:#0A3069;">&quot;TRANSACTION_TIME_TO_LIVE_MS&quot;</span><span style="color:#CF222E;">:</span><span style="color:#0550AE;">100000</span><span style="color:#24292F;">,</span><span style="color:#0A3069;">&quot;TRANSACTION_STATUS_TIMEOUT_MS&quot;</span><span style="color:#CF222E;">:</span><span style="color:#0550AE;">10000</span><span style="color:#24292F;">,</span><span style="color:#0A3069;">&quot;MAX_INSTRUCTION_NUMBER&quot;</span><span style="color:#CF222E;">:</span><span style="color:#0550AE;">4096</span><span style="color:#24292F;">,</span><span style="color:#0A3069;">&quot;ADD_TRANSACTION_NONCE&quot;</span><span style="color:#CF222E;">:</span><span style="color:#0550AE;">false</span><span style="color:#24292F;">,</span><span style="color:#0A3069;">&quot;LOGGER_CONFIGURATION&quot;</span><span style="color:#CF222E;">:</span><span style="color:#24292F;">{</span><span style="color:#0A3069;">&quot;MAX_LOG_LEVEL&quot;</span><span style="color:#CF222E;">:</span><span style="color:#0A3069;">&quot;INFO&quot;</span><span style="color:#24292F;">,</span><span style="color:#0A3069;">&quot;TELEMETRY_CAPACITY&quot;</span><span style="color:#CF222E;">:</span><span style="color:#0550AE;">1000</span><span style="color:#24292F;">,</span><span style="color:#0A3069;">&quot;COMPACT_MODE&quot;</span><span style="color:#CF222E;">:</span><span style="color:#0550AE;">false</span><span style="color:#24292F;">,</span><span style="color:#0A3069;">&quot;LOG_FILE_PATH&quot;</span><span style="color:#CF222E;">:</span><span style="color:#24292F;">null}}</span></span>
<span class="line"><span style="color:#953800;">Listening</span><span style="color:#24292F;"> to events with filter</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">Pipeline</span><span style="color:#24292F;">(</span><span style="color:#953800;">EventFilter</span><span style="color:#24292F;"> { entity</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">None</span><span style="color:#24292F;">, hash</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">None</span><span style="color:#24292F;"> })</span></span>
<span class="line"><span style="color:#8250DF;">Pipeline</span><span style="color:#24292F;">(</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#953800;">Event</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        entity_type</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Transaction</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">        status</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Validating</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">        hash</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> 10fadf7b7fb8036d00bbd8cadc5358193b04ad6573537463acef2091ba4d0e77,</span></span>
<span class="line"><span style="color:#24292F;">    },</span></span>
<span class="line"><span style="color:#24292F;">)</span></span>
<span class="line"><span style="color:#8250DF;">Pipeline</span><span style="color:#24292F;">(</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#953800;">Event</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        entity_type</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Block</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">        status</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Validating</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">        hash</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> 944269f27e1ed8882c6c8c74bd641bc3551ef5651320f4e1e1be11a470b4e3c3,</span></span>
<span class="line"><span style="color:#24292F;">    },</span></span>
<span class="line"><span style="color:#24292F;">)</span></span>
<span class="line"><span style="color:#8250DF;">Pipeline</span><span style="color:#24292F;">(</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#953800;">Event</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">        entity_type</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Transaction</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">        status</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> </span><span style="color:#953800;">Committed</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">        hash</span><span style="color:#CF222E;">:</span><span style="color:#24292F;"> 10fadf7b7fb8036d00bbd8cadc5358193b04ad6573537463acef2091ba4d0e77,</span></span>
<span class="line"><span style="color:#24292F;">    },</span></span>
<span class="line"><span style="color:#24292F;">)</span></span>
<span class="line"></span></code></pre></div>`,82),t=[l];function p(c,i,r,y,d,h){return n(),a("div",null,t)}var f=s(o,[["render",p]]);export{g as __pageData,f as default};
