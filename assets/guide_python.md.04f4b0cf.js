import{_ as s,c as e,o as n,d as a}from"./app.ced819ec.js";const g='{"title":"Python 3 guide","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. Iroha 2 Client Setup","slug":"_1-iroha-2-client-setup"},{"level":2,"title":"2. Configuring Iroha 2","slug":"_2-configuring-iroha-2"},{"level":2,"title":"3. Registering a Domain","slug":"_3-registering-a-domain"},{"level":2,"title":"4. Registering an Account","slug":"_4-registering-an-account"},{"level":2,"title":"5. Registering and minting assets","slug":"_5-registering-and-minting-assets"},{"level":2,"title":"6. Visualizing outputs","slug":"_6-visualizing-outputs"}],"relativePath":"guide/python.md","lastUpdated":1649230251000}',o={},t=a(`<h1 id="python-3-guide" tabindex="-1">Python 3 guide <a class="header-anchor" href="#python-3-guide" aria-hidden="true">#</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>WIP: <code>iroha-python</code> works only with <code>iroha v2-pre-rc.1</code> for now.</p></div><h2 id="_1-iroha-2-client-setup" tabindex="-1">1. Iroha 2 Client Setup <a class="header-anchor" href="#_1-iroha-2-client-setup" aria-hidden="true">#</a></h2><p>There are two versions of Iroha python to choose from. In theory, the Iroha 1 version of Iroha Python (that also has the best documentation) should be compatible with an Iroha 2 deployment.</p><p>Thus we should build and install the Iroha 2 compatible version of Iroha-python, using (for now) its GitHub repository.</p><p>Let&#39;s create a separate folder for Iroha python and clone its GitHub repository into it.</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#0550AE;">cd</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">~</span><span style="color:#24292F;">/Git/</span></span>
<span class="line"><span style="color:#24292F;">git clone https://github.com/hyperledger/iroha-python/tree/iroha2</span></span>
<span class="line"></span></code></pre></div><p>We need the <code>iroha2</code> branch</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#0550AE;">cd</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">~</span><span style="color:#24292F;">/Git/iroha-python</span></span>
<span class="line"><span style="color:#24292F;">git checkout iroha2</span></span>
<span class="line"></span></code></pre></div><p>Iroha Python is written in Rust, using the PyO3 library. Thus, unlike most python packages, you must build it first.</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">pip install maturin</span></span>
<span class="line"><span style="color:#24292F;">maturin build</span></span>
<span class="line"></span></code></pre></div><p>After the build is complete, you may then install it into your system.</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">pip install ./target/wheels/iroha_python-</span><span style="color:#CF222E;">*</span><span style="color:#24292F;">.whl</span></span>
<span class="line"></span></code></pre></div><p>Finally, you will need a working client configuration:</p><div class="language-bash"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">cp -vfr </span><span style="color:#CF222E;">~</span><span style="color:#24292F;">/Git/iroha/configs/client_cli/config.json example/config.json</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can also use the provided <code>config.json</code> in the <code>example</code> folder, if you also call <code>docker compose up</code> from that same folder. This has to do with the fact that the configuration for the docker files in Iroha python is slightly different.</p></div><h2 id="_2-configuring-iroha-2" tabindex="-1">2. Configuring Iroha 2 <a class="header-anchor" href="#_2-configuring-iroha-2" aria-hidden="true">#</a></h2><p>Unlike <code>iroha_client_cli</code> finding the configuration file in a scripting language is the responsibility of the person writing the script. The easiest method is to de-serialise a dictionary type from the provided <code>config.json</code> .</p><p>This is an example of how you could do that in Python:</p><div class="language-python"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">import</span><span style="color:#24292F;"> json</span></span>
<span class="line"><span style="color:#CF222E;">from</span><span style="color:#24292F;"> iroha2 </span><span style="color:#CF222E;">import</span><span style="color:#24292F;"> Client</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292F;">cfg </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> json.loads(</span><span style="color:#0550AE;">open</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&quot;config.json&quot;</span><span style="color:#24292F;">).read())</span></span>
<span class="line"><span style="color:#24292F;">cl </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> Client(cfg)</span></span>
<span class="line"></span></code></pre></div><p>If the configuration file is malformed, you can expect an <code>exception</code> to notify you. However, the client doesn&#39;t do any verification: if the account used in <code>config.json</code> is not in the blockchain, or has the wrong private key, you won&#39;t know that until you try and execute a simple instruction. More on that in the following section.</p><p>It should also be noted that Iroha Python is under heavy development. It severely lacks in documentation and its API can be made more idiomatically Python. At the time of writing there are no active maintainers of the Iroha Python library.</p><h2 id="_3-registering-a-domain" tabindex="-1">3. Registering a Domain <a class="header-anchor" href="#_3-registering-a-domain" aria-hidden="true">#</a></h2><p>It is important to remember that Iroha python is wrapping Rust code. As such, many of Python&#39;s idioms are not yet accommodated; for example, there&#39;s no duck-typing of the <code>Register</code> instruction.</p><div class="language-python"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">from</span><span style="color:#24292F;"> iroha2.data_model.isi </span><span style="color:#CF222E;">import</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">*</span></span>
<span class="line"><span style="color:#CF222E;">from</span><span style="color:#24292F;"> iroha2.data_model.domain </span><span style="color:#CF222E;">import</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">*</span></span>
<span class="line"><span style="color:#CF222E;">from</span><span style="color:#24292F;"> iroha2.data_model.expression </span><span style="color:#CF222E;">import</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">*</span></span>
<span class="line"><span style="color:#CF222E;">from</span><span style="color:#24292F;"> iroha2.data_model.events </span><span style="color:#CF222E;">import</span><span style="color:#24292F;"> EventFilter, pipeline</span></span>
<span class="line"><span style="color:#CF222E;">from</span><span style="color:#24292F;"> iroha2.data_model </span><span style="color:#CF222E;">import</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">*</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292F;">domain </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> Domain(</span><span style="color:#0A3069;">&quot;looking_glass&quot;</span><span style="color:#24292F;">)</span></span>
<span class="line"><span style="color:#24292F;">register </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> Register(Expression(Value(Identifiable(domain))))</span></span>
<span class="line"></span></code></pre></div><p>We are creating a domain and wrapping it in multiple type-erasing constructs. A domain is wrapped in <code>Identifiable</code> (which would be a trait in Rust), which is wrapped in <code>Value</code>, which is wrapped in <code>Expression</code>, which finally is wrapped in the <code>Register</code> instruction. This is not entirely against Python&#39;s conventions, (it is strongly typed, after all), and not entirely counter-intuitive, once you see the corresponding Rust code.</p><p>The instruction to register must be submitted, in order for anything to happen.</p><div class="language-python"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#0550AE;">hash</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> cl.submit_isi(register)</span></span>
<span class="line"></span></code></pre></div><p>Note that we also keep track of the <code>hash</code> of the transaction. This will become useful <a href="#_6-visualizing-outputs">later</a>.</p><h2 id="_4-registering-an-account" tabindex="-1">4. Registering an Account <a class="header-anchor" href="#_4-registering-an-account" aria-hidden="true">#</a></h2><p>Similarly to the previous case, except the wrapping structures are different. There are a couple of things to watch out for: First of all, we can only register an account to an existing domain. The best UX design practices dictate that you should check if the requested domain exists now, and if it doesn\u2019t \u2014 suggest a fix to the user.</p><div class="language-python"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">from</span><span style="color:#24292F;"> iroha2.data_model.isi </span><span style="color:#CF222E;">import</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">*</span></span>
<span class="line"><span style="color:#CF222E;">from</span><span style="color:#24292F;"> iroha2.data_model.domain </span><span style="color:#CF222E;">import</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">*</span></span>
<span class="line"><span style="color:#CF222E;">from</span><span style="color:#24292F;"> iroha2.data_model.expression </span><span style="color:#CF222E;">import</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">*</span></span>
<span class="line"><span style="color:#CF222E;">from</span><span style="color:#24292F;"> iroha2.data_model.events </span><span style="color:#CF222E;">import</span><span style="color:#24292F;"> EventFilter, pipeline</span></span>
<span class="line"><span style="color:#CF222E;">from</span><span style="color:#24292F;"> iroha2.data_model </span><span style="color:#CF222E;">import</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">*</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292F;">public_key </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> \u2026 </span><span style="color:#6E7781;"># Get this from white_rabbit.</span></span>
<span class="line"><span style="color:#24292F;">bunny </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> Account(</span><span style="color:#0A3069;">&quot;white_rabbit&quot;</span><span style="color:#24292F;">, </span><span style="color:#0A3069;">&quot;looking_glass&quot;</span><span style="color:#24292F;">, </span><span style="color:#953800;">signatories</span><span style="color:#CF222E;">=</span><span style="color:#24292F;">[public_key])</span></span>
<span class="line"><span style="color:#24292F;">register </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> Register(Expression(Value(Identifiable(bunny))))</span></span>
<span class="line"></span></code></pre></div><p>Second, you should provide the account with a public key. It is tempting to generate both it and the private key at this time, but it isn&#39;t the brightest idea. Remember, that <em>the white_rabbit</em> trusts <em>you, alice@wonderland,</em> to create an account for them in the domain <em>looking_glass, <strong>but doesn&#39;t want you to have access to that account after creation</strong>.</em> If you gave <em>white_rabbit</em> a key that you generated yourself, how would they know if you don&#39;t have a copy of their private key? Instead, the best way is to <strong>ask</strong> <em>white_rabbit</em> to generate a new key-pair, and give you the public half of it.</p><p>After putting all of this together, we submit it as before:</p><div class="language-python"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#0550AE;">hash</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> cl.submit_isi(register)</span></span>
<span class="line"></span></code></pre></div><h2 id="_5-registering-and-minting-assets" tabindex="-1">5. Registering and minting assets <a class="header-anchor" href="#_5-registering-and-minting-assets" aria-hidden="true">#</a></h2><p>Now we must talk a little about assets. Iroha has been built with few underlying assumptions about what the assets need to be. The assets can be fungible (every \xA31 is exactly the same as every other \xA31), or non-fungible (a \xA31 bill signed by the Queen of Hearts is not the same as a \xA31 bill signed by the King of Spades), mintable (you can make more of them) and non-mintable (you can only specify their initial quantity in the genesis block). Additionally, the assets have different underlying value types.</p><p>Asset creation is by far the most cumbersome.</p><div class="language-python"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">import</span><span style="color:#24292F;"> iroha2.data_model.asset </span><span style="color:#CF222E;">as</span><span style="color:#24292F;"> asset</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292F;">time </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> asset.Definition(</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#953800;">value_type</span><span style="color:#CF222E;">=</span><span style="color:#24292F;">asset.ValueType.Quantity,</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#953800;">id</span><span style="color:#CF222E;">=</span><span style="color:#24292F;">asset.DefinitionId(</span><span style="color:#953800;">name</span><span style="color:#CF222E;">=</span><span style="color:#0A3069;">&quot;time&quot;</span><span style="color:#24292F;">, </span><span style="color:#953800;">domain_name</span><span style="color:#CF222E;">=</span><span style="color:#0A3069;">&quot;looking_glass&quot;</span><span style="color:#24292F;">),</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#953800;">metadata</span><span style="color:#CF222E;">=</span><span style="color:#24292F;">{},</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#953800;">mintable</span><span style="color:#CF222E;">=</span><span style="color:#0550AE;">False</span></span>
<span class="line"><span style="color:#24292F;">)</span></span>
<span class="line"></span></code></pre></div><p>Note the following; First, we used the <code>**kwargs</code> syntax to make everything more explicit.</p><p>We have a <code>value_type</code> which must be specified. Python is duck-typed, while Rust isn\u2019t. Make sure that you track the types diligently, and make use of <code>mypy</code> annotations. The <code>Quantity</code> value type is an internal 32-bit unsigned integer. Your other options are <code>BigQuantity</code> which is a 128-bit unsigned integer and <code>Fixed</code>. All of these are unsigned. Any checked operation with a negative <code>Fixed</code> value (one that you got by converting a negative floating-point number), will result in an error.</p><p>Continuing the theme of explicit typing, the <code>asset.DefinitionId</code> is its own type. We could have also written <code>asset.DefinitionId.parse(&quot;time#looking_glass&quot;)</code>, but making sure that you know what\u2019s going on is more useful in this case. Here, the <code>metadata</code> is an empty dictionary. We won\u2019t go much into metadata, because it is out of the scope of this tutorial.</p><p>Finally, we have <code>mintable</code>. By default this is set to <code>True</code>, however, setting it to <code>False</code> means that any attempt to mint more of <code>time#looking_glass</code> is doomed to fail. Unfortunately, since we didn\u2019t add any <code>time</code> at genesis, the <em>white_rabbit</em> will never have time. There just isn\u2019t any in his domain, and more can\u2019t be minted.</p><p>OK. So how about a mint demonstration? Fortunately, <em>alice@wonderland</em> has an asset called <em>roses#wonderland,</em> which can be minted. For that we need to do something much simpler.</p><div class="language-python"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">amount </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> Expression(Value(U32(</span><span style="color:#0550AE;">42</span><span style="color:#24292F;">)))</span></span>
<span class="line"><span style="color:#24292F;">destination </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> Expression(Value(Identifiable(asset.DefinitionId.parse(</span><span style="color:#0A3069;">&quot;rose#wonderland&quot;</span><span style="color:#24292F;">))))</span></span>
<span class="line"><span style="color:#24292F;">mint_amount </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> Mint(amount, destination)</span></span>
<span class="line"><span style="color:#24292F;">cl.submit_isi(mint_amount)</span></span>
<span class="line"></span></code></pre></div><p>Which would add <code>42</code> to the current tally of roses that Alice has.</p><h2 id="_6-visualizing-outputs" tabindex="-1">6. Visualizing outputs <a class="header-anchor" href="#_6-visualizing-outputs" aria-hidden="true">#</a></h2><p>The paradigm that Iroha chose to allow monitoring of some events is the <em>filter-map paradigm</em>. In order to know e.g. what happened to a submitted instruction we need to write some code.</p><p>First, we&#39;ll need to remember the <code>hash</code> of the transaction that we want to track, next we create a filter:</p><div class="language-python"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#0550AE;">filter</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> EventFilter.Pipeline(</span></span>
<span class="line"><span style="color:#24292F;">    pipeline.EventFilter(</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#953800;">entity</span><span style="color:#CF222E;">=</span><span style="color:#24292F;">pipeline.EntityType.Transaction(),</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#953800;">hash</span><span style="color:#CF222E;">=</span><span style="color:#0550AE;">None</span><span style="color:#24292F;">,</span></span>
<span class="line"><span style="color:#24292F;">    ))</span></span>
<span class="line"></span></code></pre></div><p>And add a listener on that filter. Don&#39;t worry, the Rust side of the process is asynchronous, so barring issues with the GIL, you won&#39;t lock up your interpreter.</p><p>Note the types. The <code>EventFilter</code> is a type that filters out anything that isn&#39;t an event (and non-event types are beyond the scope of this tutorial). The <code>pipeline</code> module helps us by providing a concrete type of <code>EventFilter</code> , namely one that listens for transactions. Note that we haven&#39;t used the <code>hash</code> here.</p><p>Finally, we add a listening filter to the client.</p><div class="language-python"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#24292F;">listener </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> cl.listen(</span><span style="color:#0550AE;">filter</span><span style="color:#24292F;">)</span></span>
<span class="line"></span></code></pre></div><p>Now we must actually listen for events:</p><div class="language-python"><pre class="shiki shiki-light" style="background-color:#ffffff;"><code><span class="line"><span style="color:#CF222E;">for</span><span style="color:#24292F;"> event </span><span style="color:#CF222E;">in</span><span style="color:#24292F;"> listener:</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#0550AE;">print</span><span style="color:#24292F;">(event)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> event[</span><span style="color:#0A3069;">&quot;Pipeline&quot;</span><span style="color:#24292F;">][</span><span style="color:#0A3069;">&quot;status&quot;</span><span style="color:#24292F;">] </span><span style="color:#CF222E;">==</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;Committed&quot;</span><span style="color:#24292F;"> \\</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">and</span><span style="color:#24292F;"> event[</span><span style="color:#0A3069;">&quot;Pipeline&quot;</span><span style="color:#24292F;">][</span><span style="color:#0A3069;">&quot;hash&quot;</span><span style="color:#24292F;">] </span><span style="color:#CF222E;">==</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">hash</span><span style="color:#24292F;">:</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">break</span></span>
<span class="line"></span></code></pre></div><p>And now, we have an infinite loop that will not quit until the event gets committed. <strong>Nobody <em>should</em> do this in production code, and instead monitor the event queue for (at least) the possibility that the transaction gets</strong> <code>Rejected</code>.</p>`,57),l=[t];function i(p,r,c,d,h,y){return n(),e("div",null,l)}var f=s(o,[["render",i]]);export{g as __pageData,f as default};
